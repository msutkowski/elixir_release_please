name: Release Test Plan

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  actions: write
  pull-requests: write

jobs:
  release-test-plan:
    if: ${{ startsWith(github.head_ref, 'release-please--branches') }}
    runs-on: ubuntu-latest
    steps:
      - name: Add Test Plan comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { number: prNumber } = context.payload.pull_request;

            // Get the previous release
            const previousRelease = await github.rest.repos.getLatestRelease({
              owner,
              repo
            });
            if (!previousRelease?.data) {
              console.log('No previous release found');
              return;
            }
            const previousReleaseTag = previousRelease.data.tag_name;
            const publishedAt = previousRelease.data.published_at;
            // Get all PRs since the previous release
            const prsSinceReleaseResponse = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:pr is:merged base:main merged:>${publishedAt}`,
              owner,
              repo
            });
            function parseTestPlan(body) {
              const startToken = '<!--testplan-->';
              const endToken = '<!--/testplan-->';
              const parts = body.split(startToken);
              const testPlans = [];
              for (let i = 1; i < parts.length; i++) {
                const testPlan = parts[i].split(endToken)[0].trim();
                testPlans.push(testPlan);
              }
              return testPlans;
            }
            const prsSinceRelease = prsSinceReleaseResponse.data.items;
            const testPlans =
              prsSinceRelease
                .filter(pr => pr.body)
                .map(pr => {
                  const testPlan = parseTestPlan(pr.body);
                  return {
                    pr,
                    testPlan: testPlan.join('\n'),
                    testPlanCount: testPlan.length,
                  };
                })
                .filter(testPlan => testPlan.testPlanCount > 0);
            if (testPlans.length === 0) {
              console.log('No test plans found');
              return;
            }
            const testPlanComment = `
            # Test Plan
            ${testPlans.map(testPlan => `## ${testPlan.pr.title} ([#${testPlan.pr.number}](${testPlan.pr.html_url})) @${testPlan.pr.user.login}\n${testPlan.testPlan}\n\n`).join('\n')}
            `.trim();
            // see if a comment already exists
            const existingComments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });
            const existingComment = existingComments.data.find(comment => comment.body.includes('# Test Plan'));
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: testPlanComment,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: testPlanComment,
              });
            }



